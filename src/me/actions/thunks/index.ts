// Libraries
import HoneyBadger from 'honeybadger-js'
import {identify} from 'rudder-sdk-js'
import {Dispatch} from 'react'
import {isEqual} from 'lodash'

// Functions making API calls
import {getMe as getIdpeMe} from 'src/client'
import {
  getAccount,
  getAccounts,
  getMe as getQuartzMe,
  getIdentity,
  getOrg as getQuartzOrg,
} from 'src/client/unityRoutes'

// Utils
import {gaEvent, updateReportingContext} from 'src/cloud/utils/reporting'
import {isFlagEnabled} from 'src/shared/utils/featureFlag'
import {CLOUD} from 'src/shared/constants'
import {getOrg} from 'src/organizations/selectors'

// Actions
import {setMe, setQuartzMe, setQuartzMeStatus} from 'src/me/actions/creators'

// Reducers
import {IdentityState} from 'src/me/reducers'

// Types
import {RemoteDataState, GetState} from 'src/types'
import {Actions} from 'src/me/actions/creators'

export const getIdentityThunk = () => async (
  dispatch: Dispatch<Actions>,
  getState: GetState
) => {
  try {
    let user

    if (isFlagEnabled('avatarWidgetMultiAccountInfo')) {
      const resp = await getAccounts({})

      if (resp.status !== 200) {
        throw new Error(resp.data.message)
      }
      user = resp.data.find(account => account.isActive)
    } else {
      const resp = await getIdpeMe({})

      if (resp.status !== 200) {
        throw new Error(resp.data.message)
      }
      user = resp.data
    }

    updateReportingContext({userID: user.id, userEmail: user.name})

    gaEvent('cloudAppUserDataReady', {
      identity: {
        id: user.id,
        email: user.name,
      },
    })

    updateReportingContext({
      userID: user.id,
    })
    HoneyBadger.setContext({
      user_id: user.id,
    })

    if (CLOUD && isFlagEnabled('rudderstackReporting')) {
      const state = getState()
      const org = getOrg(state)
      identify(user.id, {email: user.name, orgID: org.id})
    }

    dispatch(setMe(user as IdentityState))
  } catch (error) {
    console.error(error)
  }
}

export const getQuartzMeThunk = () => async dispatch => {
  try {
    dispatch(setQuartzMeStatus(RemoteDataState.Loading))

    let currentIdentity

    /*CLOUD && isFlagEnabled('quartzIdentity')*/

    if (1 === 1) {
      const quartzIdentity = await getIdentity({})

      if (quartzIdentity.status !== 200) {
        throw new Error(quartzIdentity.data.message)
      }

      const {account, org, user} = quartzIdentity.data
      const {accountCreatedAt, paygCreditStartDate, type: accountType} = account
      const {clusterHost, id: orgId} = org
      const {email, id: userId, operatorRole} = user

      const currentAccount = await getAccount({
        accountId: account.id.toString(),
      })

      if (currentAccount.status !== 200) {
        throw new Error(currentAccount.data.message)
      }

      const {billingProvider} = currentAccount.data

      const currentOrg = await getQuartzOrg({orgId: orgId})

      if (currentOrg.status !== 200) {
        throw new Error(currentOrg.data.message)
      }

      const {isRegionBeta, regionCode, regionName} = currentOrg.data

      // Do we still need billing provider? Resolved typing issue by fixing unityRoutes

      currentIdentity = {
        accountCreatedAt: accountCreatedAt,
        accountType: accountType,
        billingProvider: billingProvider,
        clusterHost: clusterHost,
        email: email,
        id: userId,
        isOperator: operatorRole ? true : false,
        isRegionBeta: isRegionBeta,
        operatorRole: operatorRole,
        paygCreditStartDate: paygCreditStartDate,
        regionCode: regionCode,
        regionName: regionName,
      }

      const meVal = await getQuartzMe({})
      console.log(
        'Does our obejct have the same value as generated by quartzMe?'
      )
      console.log(isEqual(meVal.data, currentIdentity))
    } else {
      const quartzMe = await getQuartzMe({})

      if (quartzMe.status !== 200) {
        throw new Error(quartzMe.data.message)
      }

      currentIdentity = quartzMe.data
    }

    dispatch(setQuartzMe(currentIdentity.data, RemoteDataState.Done))
  } catch (error) {
    console.error(error)
    dispatch(setQuartzMeStatus(RemoteDataState.Error))
  }
}
